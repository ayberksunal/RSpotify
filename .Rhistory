{
Sonuc$Hareketlilik[k]='Az Hareketli'
}
if(Sonuc$oran[k] > oranSınıflandırma[4] ){
Sonuc$Hareketlilik[k]='Cok Hareketli'
}
}
View(features)
View(Sonuc)
View(featuresEurovision)
eurovisionSorted<-featuresEurovision2[order(featuresEurovision2$danceability),]
eurovisionPredictionData <- eurovisionSorted[1:635,3:14]
#change the locaiton of two column
eurovisionPredictionData$Energy<-eurovisionSorted[1:635,16]
eurovisionPredictionData$Year<-eurovisionSorted[1:635,15]
trainingSet <- eurovisionPredictionData[1:535, 1:13]
testSet <- eurovisionPredictionData[536:635, 1:13]
trainingOutcomes <- eurovisionPredictionData[1:535, 14]
testOutcomes <- eurovisionPredictionData[536:635, 14]
write.csv(S, file = "MyDatafeaturesEurovision.csv")
write.csv(Sonuc, file = "MyData.csv")
View(Sonuc)
eurovisionSorted<-featuresEurovision2[order(featuresEurovision2$danceability),]
eurovisionPredictionData <- eurovisionSorted[1:635,3:14]
#change the locaiton of two column
eurovisionPredictionData$Energy<-eurovisionSorted[1:635,16]
eurovisionPredictionData$Year<-eurovisionSorted[1:635,15]
deneme<-eurovisionPredictionData
trainingSet <- deneme[1:535, 1:13]
testSet <- deneme[536:635, 1:13]
trainingOutcomes <- deneme[1:535, 14]
testOutcomes <- deneme[536:635, 14]
library(class)
predictions <- knn(train = trainingSet, cl = trainingOutcomes, k = 20,test = testSet)
table(predictions,testOutcomes)
eurovisionPredictionData
eurovisionPredictionData$Energy<-eurovisionSorted[1:635,16]
eurovisionPredictionData$Year<-eurovisionSorted[1:635,15]
eurovisionPredictionData
eurovisionPredictionData <- eurovisionSorted[1:635,3:14]
eurovisionPredictionData
View(eurovisionPredictionData)
eurovisionPredictionData$Energy<-eurovisionSorted[1:635,16]
eurovisionPredictionData$Year<-eurovisionSorted[1:635,15]
trainingSet
testSet
trainingOutcomes
testOutcomes
predictions <- knn(train = trainingSet, cl = trainingOutcomes, k = 20,test = testSet)
table(predictions,testOutcomes)
eurovisionSorted<-featuresEurovision2[order(featuresEurovision2$danceability),]
eurovisionPredictionData <- eurovisionSorted[1:635,3:16]
trainingSet <- eurovisionPredictionData[1:535, 1:13]
testSet <- eurovisionPredictionData[536:635, 1:13]
trainingOutcomes <- eurovisionPredictionData[1:535, 14]
testOutcomes <- eurovisionPredictionData[536:635, 14]
library(class)
predictions <- knn(train = trainingSet, cl = trainingOutcomes, k = 20,test = testSet)
table(predictions,testOutcomes)
predictions <- predict(train = trainingSet, cl = trainingOutcomes, k = 20,test = testSet)
table(predictions,testOutcomes)
predictions <- predict(train = trainingSet, cl = trainingOutcomes, k = 20,test = testSet)
pairs(featuresEurovision)
pairs(featuresEurovision$danceability,featuresEurovision$energy,featuresEurovision$loudness)
showPairs<-(featuresEurovision$danceability,featuresEurovision$energy,featuresEurovision$loudness,featuresEurovision$acousticness,featuresEurovision$tempo,featuresEurovision$)
showPairs<-rbind(featuresEurovision$danceability,featuresEurovision$energy,featuresEurovision$loudness,featuresEurovision$acousticness,featuresEurovision$tempo,featuresEurovision$)
showPairs=featuresEurovision$danceability,featuresEurovision$energy,featuresEurovision$loudness,featuresEurovision$acousticness,featuresEurovision$tempo,featuresEurovision$)
showPairs<-(featuresEurovision$danceability,featuresEurovision$energy,featuresEurovision$loudness,featuresEurovision$acousticness,featuresEurovision$tempo,featuresEurovision$)
View(featuresEurovision)
pairs(featuresEurovision[1:619],2:14)
pairs(featuresEurovision[1:619,2:14])
pairs(featuresEurovision[1:619,2:12])
colors
eurovisionSorted<-featuresEurovision2[order(featuresEurovision2$danceability),]
eurovisionPredictionData <- eurovisionSorted[1:635,3:16]
trainingSet <- eurovisionPredictionData[1:535, 1:13]
testSet <- eurovisionPredictionData[536:635, 1:13]
trainingOutcomes <- eurovisionPredictionData[1:535, 14]
testOutcomes <- eurovisionPredictionData[536:635, 14]
library(class)
predictions <- knn(train = trainingSet, cl = trainingOutcomes, k = 20,test = testSet)
table(predictions,testOutcomes)
View(eurovisionSorted)
eurovisionPredictionData$dance <- eurovisionSorted[1:635,2]
eurovisionPredictionData <- eurovisionSorted[1:635,4:16]
eurovisionPredictionData
eurovisionPredictionData<-data.frame()
eurovisionPredictionData<-data.frame()
eurovisionPredictionData<-data.frame()
eurovisionPredictionData$dance <- eurovisionSorted[1:635,2]
eurovisionPredictionData$dance <- eurovisionSorted[1:635,2]
eurovisionPredictionData<-data.frame()
eurovisionPredictionData <- eurovisionSorted[1:635,4:16]
eurovisionPredictionData$dance <- eurovisionSorted[1:635,2]
eurovisionPredictionData
eurovisionSorted<-featuresEurovision2[order(featuresEurovision2$danceability),]
eurovisionPredictionData<-data.frame()
eurovisionPredictionData <- eurovisionSorted[1:635,4:16]
eurovisionPredictionData$dance <- eurovisionSorted[1:635,2]
trainingSet <- eurovisionPredictionData[1:535, 1:13]
testSet <- eurovisionPredictionData[536:635, 1:13]
trainingOutcomes <- eurovisionPredictionData[1:535, 14]
testOutcomes <- eurovisionPredictionData[536:635, 14]
library(class)
predictions <- knn(train = trainingSet, cl = trainingOutcomes, k = 20,test = testSet)
table(predictions,testOutcomes)
View(featuresEurovisionBirUlke)
View(featuresEurovisionBirUlke2)
featuresEurovisionBirUlke$Enerjisi<-"Bilinmiyor"
#featuresEurovisionBirUlke2<-featuresEurovisionBirUlke
quantilesEurovision<-quantile(featuresEurovisionBirUlke$energy)
for(k in 1:nrow(featuresEurovisionBirUlke)){
if(featuresEurovisionBirUlke$energy[k] < quantilesEurovision[2]){
featuresEurovisionBirUlke$Enerjisi[k] = "Low Energic"
}
if(featuresEurovisionBirUlke$energy[k] >= quantilesEurovision[2] && featuresEurovisionBirUlke$energy[k] < quantilesEurovision[4])
{
featuresEurovisionBirUlke$Enerjisi[k]='Energic'
}
if(featuresEurovisionBirUlke$energy[k] > quantilesEurovision[4] ){
featuresEurovisionBirUlke$Enerjisi[k]='High Energic'
}
}
featuresEurovisionBirUlke$Enerjisi<-"Bilinmiyor"
#featuresEurovisionBirUlke2<-featuresEurovisionBirUlke
quantilesEurovision<-quantile(featuresEurovisionBirUlke$energy)
for(k in 1:nrow(featuresEurovisionBirUlke)){
if(featuresEurovisionBirUlke$energy[k] < quantilesEurovision[2]){
featuresEurovisionBirUlke$Enerjisi[k] = "Low Energic"
}
if(featuresEurovisionBirUlke$energy[k] >= quantilesEurovision[2] && featuresEurovisionBirUlke$energy[k] < quantilesEurovision[4])
{
featuresEurovisionBirUlke$Enerjisi[k]='Energic'
}
if(featuresEurovisionBirUlke$energy[k] > quantilesEurovision[4] ){
featuresEurovisionBirUlke$Enerjisi[k]='High Energic'
}
}
featuresEurovisionBirUlke$energy[k]
View(featuresEurovisionBirUlke2)
featuresEurovisionBirUlke2$Enerjisi<-"Bilinmiyor"
#featuresEurovisionBirUlke2<-featuresEurovisionBirUlke
quantilesEurovision<-quantile(featuresEurovisionBirUlke2$energy)
for(k in 1:nrow(featuresEurovisionBirUlke2)){
if(featuresEurovisionBirUlke2$energy[k] < quantilesEurovision[2]){
featuresEurovisionBirUlke2$Enerjisi[k] = "Low Energic"
}
if(featuresEurovisionBirUlke2$energy[k] >= quantilesEurovision[2] && featuresEurovisionBirUlke2$energy[k] < quantilesEurovision[4])
{
featuresEurovisionBirUlke2$Enerjisi[k]='Energic'
}
if(featuresEurovisionBirUlke2$energy[k] > quantilesEurovision[4] ){
featuresEurovisionBirUlke2$Enerjisi[k]='High Energic'
}
}
View(featuresEurovisionBirUlke2)
write.csv(featuresEurovisionBirUlke2, file = "MyDatafeaturesEurovisionBirUlke.csv")
eurovisionSorted[,c("dancebility","")]
eurovisionSorted[,c("dancebility","energy")]
eurovisionSorted$danceability,eurovisionSorted$energy
names(eurovisionSorted.df)
names(eurovisionSorted)
subset(eurovisionSorted$id,eurovisionSorted$energy)
subset(eurovisionSorted select("danceability","energy","key","loudness","mode","speechiness","acousticness" ,"instrumentalness", "liveness","valence","tempo","duration_ms","time_signature", "Yıl","Enerjisi"))
subset(eurovisionSorted ,select=c("danceability","energy","key","loudness","mode","speechiness","acousticness" ,"instrumentalness", "liveness","valence","tempo","duration_ms","time_signature", "Yıl","Enerjisi"))
deneme<-subset(eurovisionSorted ,select=c("danceability","key","loudness","mode","speechiness","acousticness" ,"instrumentalness", "liveness","valence","tempo","duration_ms","time_signature", "Yıl","Enerjisi"))
subset(eurovisionSorted ,select=c("danceability","energy","key","loudness","mode","speechiness","acousticness" ,"instrumentalness", "liveness","valence","tempo","duration_ms","time_signature", "Yıl","Enerjisi"))deneme
deneme
View(deneme)
eurovisionPredictionData <- deneme[1:635,1:14]
trainingSet <- eurovisionPredictionData[1:535, 1:13]
testSet <- eurovisionPredictionData[536:635, 1:13]
trainingOutcomes <- eurovisionPredictionData[1:535, 14]
testOutcomes <- eurovisionPredictionData[536:635, 14]
library(class)
predictions <- knn(train = trainingSet, cl = trainingOutcomes, k = 20,test = testSet)
table(predictions,testOutcomes)
deneme[1:635,1:14]
trainingSet <- eurovisionPredictionData[1:535, 1:13]
trainingSet
eurovisionPredictionData[536:635, 1:13]
trainingOutcomes
eurovisionPredictionData[1:535, 14]
eurovisionPredictionData[536:635, 14]
predictions <- knn(train = trainingSet, cl = trainingOutcomes, k = 20,test = testSet)
predictions <- knn(train = trainingSet, cl = trainingOutcomes, k = 20,test = testSet)
predictions <- knn(train = trainingSet, cl = trainingOutcomes, k = 1,test = testSet)
library(class)
predictions <- knn(train = trainingSet, cl = trainingOutcomes, k = 1,test = testSet)
eurovisionPredictionData <- deneme[1:635,1:14]
trainingSet <- eurovisionPredictionData[1:535, 1:13]
testSet <- eurovisionPredictionData[536:635, 1:13]
trainingOutcomes <- eurovisionPredictionData[1:535, 14]
testOutcomes <- eurovisionPredictionData[536:635, 14]
eurovisionSorted<-featuresEurovision2[order(featuresEurovision2$danceability),]
eurovisionPredictionData <- eurovisionSorted[1:635,3:16]
trainingSet <- eurovisionPredictionData[1:535, 1:13]
testSet <- eurovisionPredictionData[536:635, 1:13]
trainingOutcomes <- eurovisionPredictionData[1:535, 14]
testOutcomes <- eurovisionPredictionData[536:635, 14]
library(class)
predictions <- knn(train = trainingSet, cl = trainingOutcomes, k = 20,test = testSet)
table(predictions,testOutcomes)
deneme<-subset(eurovisionSorted ,select=c("danceability","energy","key","loudness","mode","speechiness","acousticness" ,"instrumentalness", "liveness","valence","tempo","duration_ms","time_signature", "Yıl","Enerjisi"))
deneme<-subset(eurovisionSorted ,select=c("danceability","key","loudness","mode","speechiness","acousticness" ,"instrumentalness", "liveness","valence","tempo","duration_ms","time_signature", "Yıl","Enerjisi"))
eurovisionSorted<-featuresEurovision2[order(featuresEurovision2$danceability),]
eurovisionPredictionData <- deneme[1:635,1:14]
trainingSet <- eurovisionPredictionData[1:535, 1:13]
testSet <- eurovisionPredictionData[536:635, 1:13]
trainingOutcomes <- eurovisionPredictionData[1:535, 14]
testOutcomes <- eurovisionPredictionData[536:635, 14]
library(class)
predictions <- knn(train = trainingSet, cl = trainingOutcomes, k = 1,test = testSet)
table(predictions,testOutcomes)
View(features)
View(features)
View(Winners)
View(Winners)
View(Winners)
View(Sonuc)
View(featuresEurovision)
library(class)
#to shuffle the rows
#we do not wanna sorted years
eurovisionSorted<-featuresEurovision2[order(featuresEurovision2$danceability),]
#to get the all columns we want
eurovisionPredictionData <- eurovisionSorted[1:635,3:16]
#gets out of prediction columns
trainingSet <- eurovisionPredictionData[1:535, 1:13]
testSet <- eurovisionPredictionData[536:635, 1:13]
#gets prediction columns
trainingOutcomes <- eurovisionPredictionData[1:535, 14]
testOutcomes <- eurovisionPredictionData[536:635, 14]
#train the machine
predictions <- knn(train = trainingSet, cl = trainingOutcomes, k = 20,test = testSet)
table(predictions,testOutcomes)
deneme<-subset(eurovisionSorted ,select=c("danceability","energy","key","loudness","mode","speechiness","acousticness" ,"instrumentalness", "liveness","valence","tempo","duration_ms","time_signature", "Yıl","Enerjisi"))
library(class)
#to shuffle the rows
#we do not wanna sorted years
eurovisionSorted<-featuresEurovision2[order(featuresEurovision2$danceability),]
#to get the all columns we want
eurovisionPredictionData <- eurovisionSorted[1:635,3:16]
#gets out of prediction columns
trainingSet <- eurovisionPredictionData[1:535, 1:13]
testSet <- eurovisionPredictionData[536:635, 1:13]
#gets prediction columns
trainingOutcomes <- eurovisionPredictionData[1:535, 14]
testOutcomes <- eurovisionPredictionData[536:635, 14]
predictions <- knn(train = trainingSet, cl = trainingOutcomes, k = 20,test = testSet)
deneme<-subset(eurovisionSorted ,select=c("danceability","key","loudness","mode","speechiness","acousticness" ,"instrumentalness", "liveness","valence","tempo","duration_ms","time_signature", "Yıl","Enerjisi"))
eurovisionSorted<-featuresEurovision2[order(featuresEurovision2$danceability),]
eurovisionPredictionData <- deneme[1:635,1:14]
trainingSet <- eurovisionPredictionData[1:535, 1:13]
testSet <- eurovisionPredictionData[536:635, 1:13]
trainingOutcomes <- eurovisionPredictionData[1:535, 14]
testOutcomes <- eurovisionPredictionData[536:635, 14]
library(class)
predictions <- knn(train = trainingSet, cl = trainingOutcomes, k = 1,test = testSet)
table(predictions,testOutcomes)
eurovisionPredictionData
trainingSet
testSet <- eurovisionPredictionData[536:635, 1:13]
testSet
trainingOutcomes
testOutcomes
predictions <- knn(train = trainingSet, cl = trainingOutcomes, k = 20,test = testSet)
table
table(predictions,testOutcomes)
table(predictions,testOutcomes)
deneme<-data.frame(table(predictions,testOutcomes))
View(deneme)
predictons
predictions
testOutcomes
write.csv(predictions, file = "prediction.csv")
oldpredict<-predictions
write.csv(testOu,, file = "testOut.csv")
write.csv(testOutcomes, file = "testOut.csv")
deneme<-read.csv("/Users/ayberk/RSpotify/dprediction.csv", sep = ",",quote = ",")
deneme
deneme<-read.csv("/Users/ayberk/RSpotify/dprediction.csv", sep = ",",quote = ",")
deneme
deneme<-read.csv("/Users/ayberk/RSpotify/dprediction.csv", sep = ",",quote = ",")
deneme
deneme<-read.csv("/Users/ayberk/RSpotify/dprediction.csv", sep = ",",quote = ",")
deneme
predictions<-deneme
table(predictions,testOutcomes)
sort(predictions)
chr
chr(predictions)
View(deneme)
testOutcomes
deneme.list <- as.list(as.data.frame(t(deneme.df)))
deneme.list <- as.list(as.data.frame(t(deneme)))
deneme
deneme.list
deneme2<-deneme[1:100]
deneme2<-deneme[1:100,1]
deneme2
table(deneme,testOutcomes)
testOutcomes
deneme<-read.csv("/Users/ayberk/RSpotify/dprediction.csv", sep = ",",quote = ",")
deneme
deneme2<-deneme[1:100,1]
deneme2
as.character(deneme2)
table(deneme2,testOutcomes)
predictions<-deneme2
table(predictions,testOutcomes)
table(oldpredict,testOutcomes)
deneme<-featuresEurovision
deneme$energy=NULL
deneme
View(deneme)
library(class)
#to shuffle the rows
#we do not wanna sorted years
eurovisionSorted<-featuresEurovision2[order(featuresEurovision2$danceability),]
#to get the all columns we want
eurovisionPredictionData <- eurovisionSorted[1:635,3:16]
#gets out of prediction columns
trainingSet <- eurovisionPredictionData[1:535, 1:13]
testSet <- eurovisionPredictionData[536:635, 1:13]
#gets prediction columns
trainingOutcomes <- eurovisionPredictionData[1:535, 14]
testOutcomes <- eurovisionPredictionData[536:635, 14]
#train the machine
predictions <- knn(train = trainingSet, cl = trainingOutcomes, k = 5,test = testSet)
table(predictions,testOutcomes)
deneme<-subset(eurovisionSorted ,select=c("danceability","energy","key","loudness","mode","speechiness","acousticness" ,"instrumentalness", "liveness","valence","tempo","duration_ms","time_signature", "Yıl","Enerjisi"))
##########################################################################################
library(class)
#to shuffle the rows
#we do not wanna sorted years
eurovisionSorted<-featuresEurovision2[order(featuresEurovision2$danceability),]
#to get the all columns we want
eurovisionPredictionData <- eurovisionSorted[1:635,3:16]
#gets out of prediction columns
trainingSet <- eurovisionPredictionData[1:535, 1:13]
testSet <- eurovisionPredictionData[535:635, 1:13]
#gets prediction columns
trainingOutcomes <- eurovisionPredictionData[1:535, 14]
testOutcomes <- eurovisionPredictionData[535:635, 14]
#train the machine
predictions <- knn(train = trainingSet, cl = trainingOutcomes, k = 5,test = testSet)
table(predictions,testOutcomes)
deneme<-subset(eurovisionSorted ,select=c("danceability","energy","key","loudness","mode","speechiness","acousticness" ,"instrumentalness", "liveness","valence","tempo","duration_ms","time_signature", "Yıl","Enerjisi"))
##########################################################################################
Groups<-1:13
Groups <-1:13
set.seed(42) Groups2<-sample(Groups,13) Groups2
set.seed(42) Groups2<-sample(Groups,13) Groups2
set.seed(42)
Groups2<-sample(Groups,13)
First <- Groups2[1:6]
First
Second <- Groups2[7:13]
Second
library(devtools)
library(Rspotify)
#To contact with  API service by appID  cliend_ID and Client_Secret
#They can be reached from the website of spotify
keys <- spotifyOAuth(app_id = "ayberk", client_id = "782a5daa8f574ba0bcaf9e8af852ad07", client_secret = "b1d2f5ce612e46c5a893db6099a5a2ec")
eurovisionPlaylists_Years_cleared<-data.frame()
#Finds the all playlist of the user with 50 offset
#Offset determines the limit of rows
eurovisionPlaylists_Years<-getPlaylist("1116592061",offset=50,token=keys);
#To erase the wanted rows
#an other way it using "filter"
for (i in 32:50){
eurovisionPlaylists_Years_cleared<-data.frame(rbind(eurovisionPlaylists_Years_cleared,eurovisionPlaylists_Years[i,1:3]))
}
#empty frame to store each features of songs
featuresEurovision<-data.frame()
#to store the result
Sonuc<-data.frame(id="1",yıl="yıl",oran=0,danceability='Bilinmiyor')
#loops all rows of playslist
#to look the songs of these playlists
for(i in 2:length(eurovisionPlaylists_Years_cleared$id))
{
#to see which country's id consuming
eurovision_playlist<-data.frame()
print(eurovisionPlaylists_Years_cleared$name[i])
eurovision_playlist<-data.frame()
#to find all song of one country
eurovision_playlist <- getPlaylistSongs("1116592061",eurovisionPlaylists_Years_cleared$id[i],token=keys)
#features["countryname"]<-allPlaylistsInfo$name[1]
#stores row number of playlist for forloop
rowNumber<-c(dim(eurovision_playlist))
rowNumber<-c(rowNumber[1])
count<-0
#looks all song of playlists
for(a in eurovision_playlist$id){
Sys.sleep(0.09)
count<-count+1
#to get JSON result
req <- httr::GET(paste0("https://api.spotify.com/v1/audio-features/",
a), httr::config(token = keys))
json1 <- httr::content(req)
dadosEuro = data.frame(id = json1$id, danceability = json1$danceability,
energy = json1$energy, key = json1$key, loudness = json1$loudness,
mode = json1$mode, speechiness = json1$speechiness,
acousticness = json1$acousticness, instrumentalness = json1$instrumentalness,
liveness = json1$liveness, valence = json1$valence,
tempo = json1$tempo, duration_ms = json1$duration_ms,
time_signature = json1$time_signature,
stringsAsFactors = F)
#adds the name of the list
dadosEuro$Yıl<-eurovisionPlaylists_Years_cleared$name[i]
featuresEurovision <- rbind( featuresEurovision, dadosEuro)
}
print(count)
}
library(devtools)
library(Rspotify)
#To contact with  API service by appID  cliend_ID and Client_Secret
#They can be reached from the website of spotify
keys <- spotifyOAuth(app_id = "ayberk", client_id = "782a5daa8f574ba0bcaf9e8af852ad07", client_secret = "b1d2f5ce612e46c5a893db6099a5a2ec")
eurovisionPlaylists_Years_cleared<-data.frame()
#Finds the all playlist of the user with 50 offset
#Offset determines the limit of rows
eurovisionPlaylists_Years<-getPlaylist("1116592061",offset=50,token=keys);
#To erase the wanted rows
#an other way it using "filter"
for (i in 34:50){
eurovisionPlaylists_Years_cleared<-data.frame(rbind(eurovisionPlaylists_Years_cleared,eurovisionPlaylists_Years[i,1:3]))
}
#empty frame to store each features of songs
featuresEurovision<-data.frame()
#to store the result
Sonuc<-data.frame(id="1",yıl="yıl",oran=0,danceability='Bilinmiyor')
#loops all rows of playslist
#to look the songs of these playlists
for(i in 2:length(eurovisionPlaylists_Years_cleared$id))
{
#to see which country's id consuming
eurovision_playlist<-data.frame()
print(eurovisionPlaylists_Years_cleared$name[i])
eurovision_playlist<-data.frame()
#to find all song of one country
eurovision_playlist <- getPlaylistSongs("1116592061",eurovisionPlaylists_Years_cleared$id[i],token=keys)
#features["countryname"]<-allPlaylistsInfo$name[1]
#stores row number of playlist for forloop
rowNumber<-c(dim(eurovision_playlist))
rowNumber<-c(rowNumber[1])
count<-0
#looks all song of playlists
for(a in eurovision_playlist$id){
Sys.sleep(0.09)
count<-count+1
#to get JSON result
req <- httr::GET(paste0("https://api.spotify.com/v1/audio-features/",
a), httr::config(token = keys))
json1 <- httr::content(req)
dadosEuro = data.frame(id = json1$id, danceability = json1$danceability,
energy = json1$energy, key = json1$key, loudness = json1$loudness,
mode = json1$mode, speechiness = json1$speechiness,
acousticness = json1$acousticness, instrumentalness = json1$instrumentalness,
liveness = json1$liveness, valence = json1$valence,
tempo = json1$tempo, duration_ms = json1$duration_ms,
time_signature = json1$time_signature,
stringsAsFactors = F)
#adds the name of the list
dadosEuro$Yıl<-eurovisionPlaylists_Years_cleared$name[i]
featuresEurovision <- rbind( featuresEurovision, dadosEuro)
}
print(count)
}
# It clusters all songs by their energy column
# clustering depends on quantiles levels
featuresEurovisionBirUlke2$Enerjisi<-"Bilinmiyor"
#featuresEurovisionBirUlke2<-featuresEurovisionBirUlke
quantilesEurovision<-quantile(featuresEurovisionBirUlke2$energy)
for(k in 1:nrow(featuresEurovisionBirUlke2)){
if(featuresEurovisionBirUlke2$energy[k] < quantilesEurovision[2]){
featuresEurovisionBirUlke2$Enerjisi[k] = "Low Energic"
}
if(featuresEurovisionBirUlke2$energy[k] >= quantilesEurovision[2] && featuresEurovisionBirUlke2$energy[k] < quantilesEurovision[4])
{
featuresEurovisionBirUlke2$Enerjisi[k]='Energic'
}
if(featuresEurovisionBirUlke2$energy[k] > quantilesEurovision[4] ){
featuresEurovisionBirUlke2$Enerjisi[k]='High Energic'
}
}
featuresEurovision2<-featuresEurovision
View(featuresEurovision2)
eurovisionSorted<-featuresEurovision2[order(featuresEurovision2$danceability),]
View(eurovisionSorted)
eurovisionSorted<-featuresEurovision2[order(featuresEurovision2$danceability),]
#to get the all columns we want
eurovisionPredictionData <- eurovisionSorted[1:591,4:15]
View(eurovisionPredictionData)
#gets out of prediction columns
trainingSet <- eurovisionPredictionData[1:491, 1:11]
testSet <- eurovisionPredictionData[492:591, 1:11]
#gets prediction columns
trainingOutcomes <- eurovisionPredictionData[1:535, 12]
testOutcomes <- eurovisionPredictionData[536:635, 12]
View(trainingSet)
predictions <- knn(train = trainingSet, cl = trainingOutcomes, k = 5,test = testSet)
library(class)
#train the machine
predictions <- knn(train = trainingSet, cl = trainingOutcomes, k = 5,test = testSet)
#gets prediction columns
trainingOutcomes <- eurovisionPredictionData[1:491, 12]
testOutcomes <- eurovisionPredictionData[492:591, 12]
#train the machine
predictions <- knn(train = trainingSet, cl = trainingOutcomes, k = 5,test = testSet)
table(predictions,testOutcomes)
